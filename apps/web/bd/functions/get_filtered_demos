DROP FUNCTION public.get_filtered_demos_with_views;

CREATE OR REPLACE FUNCTION public.get_filtered_demos_with_views(
  p_quick_filter text,
  p_sort_by text,
  p_offset integer,
  p_limit integer,
  p_tag_slug text DEFAULT NULL
) RETURNS TABLE (
  id bigint,
  name text,
  demo_code text,
  preview_url text,
  video_url text,
  compiled_css text,
  demo_dependencies jsonb,
  demo_direct_registry_dependencies jsonb,
  pro_preview_image_url text,
  created_at timestamptz,
  updated_at timestamptz,
  component_id bigint,
  component_data jsonb,
  user_data jsonb,
  component_user_data jsonb,
  tags jsonb,
  total_count bigint,
  fts tsvector,
  demo_slug text,
  debug_info jsonb
) LANGUAGE plpgsql SECURITY DEFINER AS $$
DECLARE
  v_total_count bigint;
BEGIN
  -- Calculate total count based on filter
  WITH filtered_demos AS (
    SELECT d.*
    FROM demos d
    JOIN components c ON d.component_id = c.id
    LEFT JOIN demo_tags dt ON d.id = dt.demo_id
    LEFT JOIN tags t ON dt.tag_id = t.id
    WHERE c.is_public = true
    AND CASE 
      WHEN p_quick_filter = 'last_released' THEN
        d.created_at > NOW() - INTERVAL '7 days'
      WHEN p_quick_filter = 'most_downloaded' THEN
        c.downloads_count > 6
      ELSE true
    END
    AND CASE 
      WHEN p_tag_slug IS NOT NULL THEN
        t.slug = p_tag_slug
      ELSE true
    END
  )
  SELECT COUNT(*) INTO v_total_count FROM filtered_demos;

  RETURN QUERY
  WITH filtered_demos AS (
    SELECT 
      d.*,
      jsonb_build_object(
        'id', c.id,
        'name', c.name,
        'component_slug', c.component_slug,
        'downloads_count', c.downloads_count,
        'likes_count', c.likes_count,
        'license', c.license
      ) as component_data,
      row_to_json(du.*)::jsonb as user_data,
      row_to_json(cu.*)::jsonb as component_user_data,
      COALESCE(
        jsonb_agg(
          jsonb_build_object(
            'id', t.id,
            'name', t.name,
            'slug', t.slug
          )
        ) FILTER (WHERE t.id IS NOT NULL),
        '[]'::jsonb
      ) as tags
    FROM demos d
    JOIN components c ON d.component_id = c.id
    JOIN users du ON d.user_id = du.id
    JOIN users cu ON c.user_id = cu.id
    LEFT JOIN demo_tags dt ON d.id = dt.demo_id
    LEFT JOIN tags t ON dt.tag_id = t.id
    WHERE c.is_public = true
    AND CASE 
      WHEN p_quick_filter = 'last_released' THEN
        d.created_at > NOW() - INTERVAL '7 days'
      WHEN p_quick_filter = 'most_downloaded' THEN
        c.downloads_count > 6
      ELSE true
    END
    AND CASE 
      WHEN p_tag_slug IS NOT NULL THEN
        t.slug = p_tag_slug
      ELSE true
    END
    GROUP BY d.id, c.id, du.id, cu.id
  )
  SELECT 
    d.id,
    d.name,
    d.demo_code,
    d.preview_url,
    d.video_url,
    d.compiled_css,
    d.demo_dependencies,
    d.demo_direct_registry_dependencies,
    d.pro_preview_image_url,
    d.created_at,
    d.updated_at,
    d.component_id,
    d.component_data,
    d.user_data,
    d.component_user_data,
    d.tags,
    v_total_count as total_count,
    d.fts,
    d.demo_slug,
    jsonb_build_object(
      'params', jsonb_build_object(
        'quick_filter', p_quick_filter,
        'sort_by', p_sort_by,
        'tag_slug', p_tag_slug
      ),
      'counts', jsonb_build_object(
        'total', v_total_count,
        'filtered', COUNT(*) OVER()
      )
    ) as debug_info
  FROM filtered_demos d
  ORDER BY 
    CASE 
      WHEN p_sort_by = 'downloads' THEN (d.component_data->>'downloads_count')::int
      WHEN p_sort_by = 'likes' THEN (d.component_data->>'likes_count')::int
      WHEN p_sort_by = 'date' THEN extract(epoch from d.created_at)
    END DESC NULLS LAST
  OFFSET p_offset
  LIMIT p_limit;
END;
$$;